/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import daos.PersistenciaPacientes;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import objetosNegocio.Paciente;

/**
 *
 * @author Aaron
 */
public class FrmPaciente extends javax.swing.JFrame {

    /**
     * Creates new form FrmPaciente
     */
    public FrmPaciente() {
        persistenciaPacientes = new PersistenciaPacientes();
        initComponents();
        tblPacientes.setModel(crearModeloTabla());
        tblPacientes.getSelectionModel().addListSelectionListener(new SeleccionTablaListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPacientes = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txfNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txfDireccion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txfEdad = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txfId = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 400));
        setPreferredSize(new java.awt.Dimension(600, 400));
        setResizable(false);

        tblPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Edad", "Dirección"
            }
        ));
        jScrollPane1.setViewportView(tblPacientes);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Nombre:");
        jPanel1.add(jLabel1);

        txfNombre.setMinimumSize(new java.awt.Dimension(35, 22));
        txfNombre.setPreferredSize(new java.awt.Dimension(120, 22));
        jPanel1.add(txfNombre);

        jLabel3.setText("Dirección");
        jPanel1.add(jLabel3);

        txfDireccion.setPreferredSize(new java.awt.Dimension(120, 22));
        jPanel1.add(txfDireccion);

        jLabel2.setText("Edad");
        jPanel1.add(jLabel2);

        txfEdad.setMinimumSize(new java.awt.Dimension(75, 22));
        txfEdad.setPreferredSize(new java.awt.Dimension(35, 22));
        jPanel1.add(txfEdad);

        jLabel4.setText("ID");
        jPanel1.add(jLabel4);

        txfId.setMinimumSize(new java.awt.Dimension(35, 22));
        txfId.setPreferredSize(new java.awt.Dimension(50, 22));
        jPanel1.add(txfId);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscar);

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregar);

        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminar);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            int id = Integer.parseInt(txfId.getText().trim());
            String nombre = txfNombre.getText().trim();
            int edad = Integer.parseInt(txfEdad.getText().trim());
            String direccion = txfDireccion.getText().trim();

            if (nombre.isEmpty() || direccion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos.");
                return;
            }

            if (!modoActualizar) {
                Paciente nuevoPaciente = new Paciente(id, nombre, edad, direccion);
                persistenciaPacientes.agregarPaciente(nuevoPaciente);
            } else {
                int fila = tblPacientes.getSelectedRow();
                if (fila != -1) {
                    Paciente paciente = persistenciaPacientes.obtenerPacientePorId(id);
                    boolean cambio = false;
                    String nombreActualizado;
                    String direccionActualizada;
                    int edadActualizada;

                    if (!paciente.getNombre().equals(nombre) || paciente.getEdad() != edad || !paciente.getDireccion().equals(direccion)) { 
                        cambio = true;
                    }

                    if (!cambio) {
                        JOptionPane.showMessageDialog(this, "No se detectaron cambios.");
                        return;
                    }
                    
                    persistenciaPacientes.actualizarPaciente(new Paciente(id, nombre, edad, direccion));
                }

                btnAgregar.setText("Agregar");
                txfId.setEditable(true);
                modoActualizar = false;
            }

            // Refrescar tabla
            refrescarTabla(persistenciaPacientes.listaPacientes());

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error: ID y Edad deben ser enteros.");
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            String idTxt = txfId.getText().trim();
            String nombre = txfNombre.getText().trim().toLowerCase();
            String edadTxt = txfEdad.getText().trim();
            String direccion = txfDireccion.getText().trim().toLowerCase();

            List<Paciente> filtrados = new ArrayList<>();
            List<Paciente> listaPacientes = persistenciaPacientes.listaPacientes();

            for (Paciente p : listaPacientes) {
                boolean coincide = true;

                if (!idTxt.isEmpty()) {
                    try {
                        int id = Integer.parseInt(idTxt);
                        if (p.getId() != id) coincide = false;
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "ID debe ser número entero.");
                        return;
                    }
                }
                if (!nombre.isEmpty() && !p.getNombre().toLowerCase().contains(nombre)) coincide = false;
                if (!edadTxt.isEmpty()) {
                    try {
                        int edad = Integer.parseInt(edadTxt);
                        if (p.getEdad() != edad) coincide = false;
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Edad debe ser número entero.");
                        return;
                    }
                }
                if (!direccion.isEmpty() && !p.getDireccion().toLowerCase().contains(direccion)) coincide = false;

                if (coincide) filtrados.add(p);
            }

            refrescarTabla(filtrados);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error en búsqueda: " + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (tblPacientes.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un paciente para eliminar.");
            return;
        }
        
        int id = Integer.parseInt(txfId.getText().trim());
        
        persistenciaPacientes.eliminarPaciente(new Paciente(id));

        refrescarTabla(persistenciaPacientes.listaPacientes());
        
        btnAgregar.setText("Agregar");
        txfId.setEditable(true);
        modoActualizar = false;
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPaciente().setVisible(true);
            }
        });
    }
    
    private DefaultTableModel crearModeloTabla() {
        List<Paciente> listaPacientes = persistenciaPacientes.listaPacientes();
        String[] columnas = {"ID", "Nombre", "Edad", "Dirección"};
        modeloTabla = new DefaultTableModel(columnas, 0);

        for (Paciente p : listaPacientes) {
            Object[] fila = { p.getId(), p.getNombre(), p.getEdad(), p.getDireccion() };
            modeloTabla.addRow(fila);
        }
        
        return modeloTabla;
    }
    
    private void refrescarTabla(List<Paciente> lista) {
        modeloTabla.setRowCount(0);
        for (Paciente p : lista) {
            Object[] fila = { p.getId(), p.getNombre(), p.getEdad(), p.getDireccion() };
            modeloTabla.addRow(fila);
        }
        tblPacientes.clearSelection();
        
        btnEliminar.setEnabled(false);
    }
    
    private class SeleccionTablaListener implements javax.swing.event.ListSelectionListener {
        @Override
        public void valueChanged(javax.swing.event.ListSelectionEvent e) {
            if(!e.getValueIsAdjusting()) {
                if (tblPacientes.getSelectedRow() != -1) {
                    int fila = tblPacientes.getSelectedRow();
                    txfId.setText(tblPacientes.getValueAt(fila, 0).toString());
                    txfNombre.setText(tblPacientes.getValueAt(fila, 1).toString());
                    txfEdad.setText(tblPacientes.getValueAt(fila, 2).toString());
                    txfDireccion.setText(tblPacientes.getValueAt(fila, 3).toString());
                    
                    btnAgregar.setText("Actualizar");
                    txfId.setEditable(false);
                    modoActualizar = true;
                    
                    btnEliminar.setEnabled(true);
                } else {
                    btnEliminar.setEnabled(false);
                }
            }
        }
    }
    
    PersistenciaPacientes persistenciaPacientes;
    DefaultTableModel modeloTabla;
    boolean modoActualizar;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPacientes;
    private javax.swing.JTextField txfDireccion;
    private javax.swing.JTextField txfEdad;
    private javax.swing.JTextField txfId;
    private javax.swing.JTextField txfNombre;
    // End of variables declaration//GEN-END:variables
}
